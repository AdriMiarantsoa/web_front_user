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

cote serveur:
// server.js

const express = require("express");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");

const app = express();
const PORT = process.env.PORT || 3001;

app.use(bodyParser.json());

// Connectez-vous à votre base de données MongoDB
mongoose.connect("mongodb://localhost:27017/messagesDB", { useNewUrlParser: true });

// Définissez le modèle de message
const messageSchema = new mongoose.Schema({
  text: String,
  sender: String,
});

const Message = mongoose.model("Message", messageSchema);

// Gérez les routes CRUD pour les messages
app.route("/messages")
  .get(async (req, res) => {
    try {
      const messages = await Message.find();
      res.json(messages);
    } catch (error) {
      res.status(500).json({ error: "Internal Server Error" });
    }
  })
  .post(async (req, res) => {
    const { text, sender } = req.body;
    const newMessage = new Message({ text, sender });

    try {
      await newMessage.save();
      res.json(newMessage);
    } catch (error) {
      res.status(500).json({ error: "Internal Server Error" });
    }
  });

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

rehefa mampiasa base:

const Messages = () => {
  // ... autres constantes et états ...

  const handleSendMessage = async () => {
    if (currentMessage.trim() !== "") {
      const newMessage = {
        text: currentMessage,
        sender: "user",
      };

      try {
        const response = await fetch("http://localhost:3001/messages", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(newMessage),
        });

        if (response.ok) {
          const savedMessage = await response.json();
          setUserMessages((prevMessages) => ({
            ...prevMessages,
            [selectedUser]: [...prevMessages[selectedUser], savedMessage],
          }));
        } else {
          console.error("Failed to send message");
        }
      } catch (error) {
        console.error("Error:", error);
      }

      setCurrentMessage("");
    }
  };
  // ... autres fonctions ...
  return (
    // ... JSX ...
  );
};
export default Messages;
